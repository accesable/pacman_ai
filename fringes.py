# -*- coding: utf-8 -*-
"""fringes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u68LaeH5A74RfgNGBm3TB54wVHxjUt2h
"""

"""Fringes.py

"""

class Queue:
  def __init__(self):
    self.items =list()

  def empty(self):
    return len(self.items)==0

  def enqueue(self,a):
   self.items.append(a)

  def dequeue(self):
    return self.items.pop(0)

  def __str__(self):
    res=''
    for i in self.items:
      iString= str(i)
      res+=iString
    return res
  
  def contain(self,a):
    return a in self.items 

  def print(self):
    print(str(self))

#Stack
class Stack:
  def __init__(self):
    self.items =list()

  def empty(self):
    return len(self.items)==0

  def push(self,a):
   self.items.append(a)

  def pop(self):
    return self.items.pop()

  def __str__(self):
    res=''
    for i in self.items:
      iString='%d  '%(i)
      res+=iString
    return res
  
  def contain(self,a):
    return a in self.items 

  def print(self):
    print(str(self))

#Priority Queue
class PriorityQueue:
  def __init__(self):
    self.items =list()
  
  def getWeight(self,key):
    for item in self.items:
      if item[0]==key:
        return item[1]

  def setWeight(self,vertex,weight):
    for item in self.items:
      if item[0] == vertex:
        self.items.remove(item)
        self.enqueue((vertex,weight))
        break
    
  def empty(self):
    return len(self.items)==0

  def enqueue(self,a:tuple):
   self.items.append(a)
   self.soft_list()

  def dequeue(self):
    return self.items.pop(0)

  def soft_list(self):
    self.items.sort(key = lambda x: x[1])

  def __str__(self):
    res=''
    for i in self.items:
      line = '(%s : %d) '%(i[0],i[1])
      res += line
    return res
  
  def contain(self,a):
    selfdict=dict(self.items)
    return a in selfdict.keys()

  def print(self):
    print(str(self))